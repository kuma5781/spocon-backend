// Code generated by MockGen. DO NOT EDIT.
// Source: grade_repository.go
//
// Generated by this command:
//
//	mockgen -source=grade_repository.go -destination=mocks/mock_grade_repository.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	model "spocon-backend/internal/domain/model/grade"

	gomock "go.uber.org/mock/gomock"
)

// MockGradeRepository is a mock of GradeRepository interface.
type MockGradeRepository struct {
	ctrl     *gomock.Controller
	recorder *MockGradeRepositoryMockRecorder
}

// MockGradeRepositoryMockRecorder is the mock recorder for MockGradeRepository.
type MockGradeRepositoryMockRecorder struct {
	mock *MockGradeRepository
}

// NewMockGradeRepository creates a new mock instance.
func NewMockGradeRepository(ctrl *gomock.Controller) *MockGradeRepository {
	mock := &MockGradeRepository{ctrl: ctrl}
	mock.recorder = &MockGradeRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGradeRepository) EXPECT() *MockGradeRepositoryMockRecorder {
	return m.recorder
}

// FetchAll mocks base method.
func (m *MockGradeRepository) FetchAll() ([]model.Grade, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAll")
	ret0, _ := ret[0].([]model.Grade)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAll indicates an expected call of FetchAll.
func (mr *MockGradeRepositoryMockRecorder) FetchAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAll", reflect.TypeOf((*MockGradeRepository)(nil).FetchAll))
}
