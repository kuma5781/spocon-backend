// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// CreateTeamRequest defines model for CreateTeamRequest.
type CreateTeamRequest struct {
	AddressCity  string `json:"address_city"`
	AddressState string `json:"address_state"`
	Description  string `json:"description"`
	GradeId      string `json:"grade_id"`
	IconPath     string `json:"icon_path"`
	Name         string `json:"name"`
	SportId      string `json:"sport_id"`
}

// CreateTeamResponse defines model for CreateTeamResponse.
type CreateTeamResponse struct {
	AddressCity  string `json:"address_city"`
	AddressState string `json:"address_state"`
	Description  string `json:"description"`
	GradeId      string `json:"grade_id"`
	IconPath     string `json:"icon_path"`
	Id           string `json:"id"`
	Name         string `json:"name"`
	SportId      string `json:"sport_id"`
	Uuid         string `json:"uuid"`
}

// GetGradesResponse defines model for GetGradesResponse.
type GetGradesResponse struct {
	Grades []Grade `json:"grades"`
}

// Grade defines model for Grade.
type Grade struct {
	Id   string `json:"id"`
	Name string `json:"name"`
}

// CreateTeamJSONRequestBody defines body for CreateTeam for application/json ContentType.
type CreateTeamJSONRequestBody = CreateTeamRequest

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9SVT2/TTBDGv0o173s0cUo5+QY9lJ5AiFtVVVt7mmwb725310hRFQnHIBWo1J4oPbUC",
	"iaIC5Y84gCh8mcUFvgXadSBO7UBBgMQpTnbmmZnnt+OsQchjwRkyrSBYAxW2MSbucVoi0XgVSXwFVxNU",
	"2v4oJBcoNUUXQqJIolILIdVd+113BUIASkvKWtDzvgUoTTTWRkSoQkmFppzVnrckiXCBRrWHNORsQRDd",
	"rj1lJK6vqQSXul6z54HE1YRKjCCYKyRKCaV+ytVHxzg5tjfq07z3tShfXMZQ247KXivBmcJ/zewxSb/C",
	"wIMkOQ0cB8GFen8N1AzqGSusxnNyhd0T1Ri7h/8lLkEA//nDZfMHm+Y7OSs9qEWkJN3KrAPR2pacQKWN",
	"nwNSZ60LrVa0sZQtcasS0dKFsu6HnJ1ZJOEKsmjikkA2cf7yLHigqe5gJQI8uIZSFcmTjWajaTvkAhkR",
	"FAKYajQbU+CBRedm8ofettC9j+zExJafjSAY0gE7TgHIRZ9tNu1HyJlG5hKJEB0aulR/WRX7UCD5IbDK",
	"FXCWjOwWmP5zkz0x2ZHJbh1nN/O9Fx9eX//0cN+kh/nm3fz9tkk3jte38tu7Jt026W6+9yrfWnccVBLH",
	"RHZPJ7Jj+nesv6SlytfE6vhtJJ1iW2vNuuiOp9sYroyx68RI2T2TPTb9NyZLTX/fZJnpPzvVGHWJpaYH",
	"fRZNayTFzgiuapoeviihuLGo9AUedX8b3eq/Xm90ObRMsFfxa/KPNPCd+5Wl7l7smfTw487bzxsvx5Dw",
	"4Fw9zANLr//IYVnP393PjzatxNMHLn/TpAcmvTGG58naJZiWn0VpM1Da9YZgbg0S2YEAfOjN974EAAD/",
	"//nLTP9zCAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
